1 - users ( joueurs ) :
- id
- uniqueUserId
- nom
- prenom
-email
-password
-solde
-gain

2 - resellers ( revendeurs ) :
- id
- uniqueResellerId
- nom
- prenom
- email
- password
- solde
- gain
- soldeRevendeur
- whatsapp
- pays ( Benin , Côte d' Ivoire, Ghana, Niger, Togo )
- status

3 - admin :
- id
- uniqueAdminId
- nom
- prenom
- email
- password



4 & 5. Games & Schedules  
   - /games (GET, POST, PUT, DELETE)  
     - id, nom, description, statut (ouvert/fermé)  
   - /games/{gameId}/schedules (GET, POST, PUT, DELETE)  
     - id, gameId, startTime, endTime  



 Les jeux des pays 

Bénin 
11h 14h - 10h55
18h 21h - 17h 55 
21h 00h - 20h 55
00h 03h - 01h 55
Nb: il n'y a pas double chance ici

 TOGO
8h 11h - 7h 55 il y a double chance ici.pour ceux jeux seul

13h 16h - 12h 55
18h 21h - 17h 55

CÔTÉ IVOIRE 
7H 10h - 6h 55
10H 13h - 9h 55
13H 16h - 12h 55
16H 19h - 15h 55
21H 00h - 20h 55
23H 02h - 22h 55
NB1: LES weekends il a jeux  a 1h et 3 h du matin.il faut que les administrateurs aient la main pour programmer des jeux sur le site.tout les jeux de la côte ivoire on double chance 

 GHANA 
 2OH 23h - 19h 55
 
 NIGER
 15 heure 18h - 14h 55
 
 NB 2: TOUT LES JEUX DOIVENT ÊTRE FERMÉ A MOINS 5 MUNITE DE L'HEURE QUI EST PROGRAMME SUR LE SITE.
 Les formules de gain des Turbo double chance 
Double chance nap3.mise multipliée par 3000
Turbo 2 double chance mise multipliée par 3000

Turbo 3 double chance mise multipliée par 800

Turbo 4 double chance mise multipliée par 500

 Nb.Le principe de gain est le même que précedemment à la difference que si le parieur opte pour la double chance, en cas de victoire, le gain est divisé proportionnellement entre Win (5 premiers numéros tires) et Machine (5 derniers numéros tires). Ainsi le gain en Win représentera 60% du gain normal et le gain en Machine 40%
[5/12, 6:01 PM] Nathan VOGLOSSOU: ok nathan, oui nathan desolé; vraiment t'as raison d'etre faché.
Voici le noms des jeux :

Bénin : benin11, benin14, benin18, benin21, benin00, 
Togo : togo8, togo13, togo18,
Côte d' Ivoire : coteivoire7, coteivoire10, coteivoire13, coteivoire16, coteivoire21, coteivoire23, coteivoire1, coteivoire3, 
Ghana : ghana20, 
Niger :  niger15












Créer un modèle soldeIntial qui va permettre d' initialiser le solde
courant du système .

Je vais créer la route initialiseSolde qui va permettre à un admin 
d' initialiser le solde courant du système. 

L' admin doit forcément être connecté , et ensuite je vais récupérer son uniqueUserId. Je vais vérifier si ce uniqueUserId existe dans la table des
admins de ma base de donnée ( sinon, l' opération s' arrête )
Ensuite, je vais récupérer le montant et le mettre dans ma table de SoldeInitial . Si il y a déja une 
ligne dans cette table , alors c' est qu' il y a déja un montant initial , je vais remplacer cette ligne par le nouveau; Donc à tout instant,
ce n' est qu' une seule ligne que je dois avoir dans cette table.

Maintenant qu' on peut initialiser un montant dans l' appli, on va créer cette route 
qui va permettre à un admin de recharger un revendeur à partir du solde initial. 
Nous avons déja construit le modèle transaction et le solde a déja été initialisé. 

Alors, pour recharger un revendeur, l' admin va fourni son email , le montant de recharge et le uniqueUserId de l' admin qui veut faire l' opération.
Je vérifie d' abord si le userUniqueId existe, ensuite si il est présent dans la table des admins.
Si le uniqueUserId de l' admin n' est pas trouvé, l' opération s' arrête en même temps. 
Ensuite , je récupère l' email du revendeur qui a été fourni. Si il existe et est présent dans la table resellers
de ma base de donnée, alors good ( je récupère toutes ces informations ) , si il n' est pas dans la table
alors l' opération s' arrête. Une fois que le reseller existe dans ma table resellers et que j' ai pu récupérer toutes les infos qui luis sont liées, 
je vais voir le montant de recharge entré par l' admin. Ensuite je compare ce montant au montant initial qui estdans ma base de donnée. Le montant dont on veut recharger le revendeur doit être inféreur à ce qu' il y a dans la table SoldeInitials. 
Et ensuite, je vais faire la recharge du revndeur. Comment ça marche ?

Le montant que va entrer l' admin ( si il est inférieur à ce qu' il y a dans SoldeInitials), alors je crée la transaction ( model transaction ) :
sender : uniqueUserId de l' admin qui est entrain de faire l' opération
receiver : uniqueResellerId ( on devrait récupérer les infos du reseller lorsque son email est validé )
money : le montant dont l' admin veut recharger le reseller ( après avoir vérifié que ce montant est  inférieur ou égal au montant qui est dans la table SoldeInitials )
date : la date 
status : validé
type : recharge

Ensuite, on va mettre à jour le soldeRevendeur du reseller ( on remplace son soldeRevendeur par le montant dont il est rechargé )
Et aussi, on va mettre à jour le montant initial du système : A chaque fois qu' un admin recharge un reseller, le montant dont il recharge est débité du montant de la table SoldeInitials. 
Donc si le montant de SoldeInitials était X , après avoir rechargé le reseller de Y , le montant de SoldeInitials revient à X - Y . 
Ceci permettra de suivre en temps réels ce qui est dépensé, ce qui reste. 

Maintenant, on va créer la route pour la recharge reseller-user :
Là, ca se passe entre un revendeur ( reseller ) et un user. Pour recharger un user, le revendeur doit entrer le email de l' user, et bien sur doit êtee connecté.
Donc je vais récupéré l' uniqueResellerId , l' email (de l' user) et le montant entré.
Je vais d' abord si l' uniqueResellerId existe dans ma table Resellers. Si oui, je continue, sinon,j' arrête.
Dans le cas où l' uniqueResellerId existe dans ma table et que le Revendeur est bien connecté je vais récupérer ses infos, et je vérifie si l' email de l' user
qu' il a entré existe dans ma table Users. Si cet email n' existe pas, alors le script s' arrête.
Si l' email existe bien dans la table Users, alors je vais récupérer les infos qui sont liés à cet user. Ensuite je voir le montant entré par le revendeur. 
Je verrai si ce montant est inférieur ou égal au montant du soldeRevendeur au niveau du revendeur ( j'  avais déja récupéré ses infos précédement ).
Si le montant dont on veut recharger l' user est inférieur ou égal au soldeRevendeur du Reseller, alors je crée la transaction.
sender : uniqueResellerId du Reseller qui est entrain de faire l' opération
receiver : uniqueUserId ( on devrait récupérer les infos de l' user lorsque son email est validé )
money : le montant dont le Reseller veut recharger le reseller ( après avoir vérifié que ce montant est inférieur ou égal au montant qui est dans soldeRevendeur du Reseller )
date : la date 
status : validé
type : recharge

Après que la transaction ait été crée avec succès, je vais :
- Mettre à jour le soldeRevendeur du Reseller ( débiter le montant dont il a rechargé l' user de son soldeRevendeur )
- Mettre à jour le solde de L' User ( c' st à dire ajouter le montant dont il vient d' être débité à son solde)

Maintenant je vais créer la route qui va permettra à un admin d' annuler une transaction.
Il peut arriver qu' un revendeur recharge un user au lieu d' un autre. Dans ce cas, il le signale
et un admin annule cette transaction.
Pour cela, il doit être fourni l' uniqueTransacId  de la transaction , et quand moi je récupère ça,
je vérifie si ce uniqueTransacId  est bien présente dans ma table Transactions , et quand je vois ça, je récupère les infos liées à cette transaction. 
Ensuite : 
Je rappelle que c' est généralement une recharge qu' on peut annuler.
Vu que j' ai déja les infos liées à la transaction, je prends le sender ( qui est doit être dans ce cas le uniqueResellerId du Revendeur ) ,
le receiver ( qui est dans ce cas le uniqueUserId de l' User qui a été rechargé ), le 	money ( l'argent dont on a rechargé l' user ) , et voici ce que je fais :
Je prends le money et je l' ajoute au soldeRevendeur du Reseller ( dont j' avais le uniqueResellerId : sender ) et ensuite je soustraire ce money du solde de l' User ( dont j' avais déja le uniqueUserId : receiver )
Et après que ces opérations aient réussi, je change le statut de la transaction de validé en annulé. Et ensuite, j' envoie un essage du succès de l' annulation de la transaction.
La route va s' appeler : /transactions/recharge/{uniqueTransacId}/cancel (POST)

Maintenant je vais créer la route qui va permettre à un user connecté de se recharger à partir de son gain. Si par exemple
un user a joué et a gagné une certaine somme, alors il peut se recharger avec son gain.
Donc voici comment ça va se passer : un user connect décide de se techarger avec son gain. 
On s' assure d' abord qu' il est connecté, ensuit on récupère son uniqueUserId , le montant de son recharge.
Avc son uniqueUserId, on vérifie si il existe dans la table Users. Si oui, on continue, sinon on arrête l' opéartion.
Si il est connecté et existe dans la table, je récupère toutes les infos qui lui sont liées.
Dans ces infos , je vérifie si son bgain est supérieur à 5000. Si oui, on continue, sion, on arrête.
Si son gain est supérieur ou égal à 5000, je vérifie le montant dont il veut se recharger. 
Ce montant doit être inférieur ou égal à ce qu' il a commme gain. Si ce n' est pas le cas, l' opération s' arrête lui notifiant que ce n' est pas possible. Si son gain est supérieur ou égal au montant dont ul veut se 
recharger, alors l' opération continue. Et ensuite :
je vais créer la transaction avec les données suivantes : 
sender : uniqueUserId de l' User qui est entrain de faire l' opération
receiver : uniqueUserId ( toujours de celui qui est entrain de faire l' opération )
money : le montant dont l' User veut se recharger  ( après avoir vérifié que ce montant est inférieur ou égal au montant qui est dans gain )
date : la date 
status : validé
type : recharge

Et après ça, je vais mettre à jour son fain et son solde.
Son gain sera débité du montant de recharge et son solde sera crédité du montant de recharge.
Et quand tout aura marché, je vais lui envoyer un message de succès.
L aroute va s' appeler : /recharge-user-to-user

6. Rechargements & Transactions  ( id, uniqueTransacId ( uuid ) , sender ( string ) , receiver ( string ) , money ( Float ) , date , status ( validé , annulé - validé ( par défaut ), type ( recharge, retrait )))
   - /transactions/recharge (POST)  
     - userId, resellerId, montant, date, status (validé, annulé)  
   - /transactions/recharge/{uniqueTransacId}/cancel (POST)  
     - pour que l’admin annule une recharge erronée  
   - /transactions/withdrawal (POST)  
     - userId, montant, date, status  

7. Tickets de pari 
   - /tickets/ (POST) → créer un ticket (mise)  
     - userId, scheduleId, chiffres joués, montant misé, date  
   - /tickets/?user={userId} (GET) → lister les tickets d’un joueur  
   - /tickets/{id} (GET, PUT) → mettre à jour le statut (validé/non validé) et créditer le gain  

8. Résultats & Gains  
   - /results/ (POST)  
     - scheduleId, numéros gagnants  
   - Lorsqu’un résultat est publié, ton back peut automatiquement :  
     1. récupérer tous les tickets liés  
     2. comparer et mettre à jour leur statut  
     3. créer une transaction de gain si validé  

9. Administration & Reporting
   - /admin/users/ (GET, POST, PUT, DELETE) – gérer tous les comptes  
   - /admin/resellers/ (GET, POST, PUT, DELETE) – activer/désactiver, bloquer  
   - /admin/transactions/ (GET) – filtrer par date, par revendeur, par type  
   - /admin/reports/statistics (GET)  
     - total misé, total reversé, total rechargé par revendeur/joueur, etc.  
   - /audit/logs (GET) – journalisation de toutes les actions importantes  

  Processus : 

  - Création de tous les models ( les 8 first ) 
  - Exportation des models en table sql avec sequelize
  - création des routes de création d' authentification pour user, admin et création de revendeur