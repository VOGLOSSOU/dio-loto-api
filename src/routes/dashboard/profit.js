const { ResellerToUserTransaction, Ticket, Withdrawal, sequelize } = require("../../db/sequelize")
const { Op, fn, col, literal } = require('sequelize')
const auth = require("../../auth/auth")

module.exports = (app) => {
  app.get('/api/dashboard/profit', auth, async (req, res) => {
    try {
      console.log('üí∞ Calcul des b√©n√©fices totaux...')

      // 1) Calculer la somme totale des recharges revendeur ‚Üí utilisateur
      const totalRechargesResult = await ResellerToUserTransaction.findAll({
        attributes: [
          [fn('SUM', col('money')), 'totalRecharges']
        ],
        where: {
          status: 'valid√©' // Uniquement les transactions valid√©es
        },
        raw: true
      })

      const totalRecharges = parseFloat(totalRechargesResult[0]?.totalRecharges || 0)
      console.log(`üí∏ Total recharges revendeur‚Üíuser: ${totalRecharges} FCFA`)

      // 2) Calculer la somme totale des retraits trait√©s (ARGENT SORTANT)
      const totalWithdrawalsResult = await Withdrawal.findAll({
        attributes: [
          [fn('SUM', col('montant')), 'totalWithdrawals']
        ],
        where: {
          statut: 'trait√©' // Uniquement les retraits trait√©s
        },
        raw: true
      })

      const totalWithdrawals = parseFloat(totalWithdrawalsResult[0]?.totalWithdrawals || 0)
      console.log(`üí∏ Total retraits trait√©s: ${totalWithdrawals} FCFA`)

      // 3) Calculer le b√©n√©fice net
      const netProfit = totalRecharges - totalWithdrawals
      console.log(`üí∞ B√©n√©fice net: ${netProfit} FCFA`)

      // 4) Statistiques suppl√©mentaires
      const stats = {
        totalRecharges,
        totalWithdrawals,
        netProfit,
        profitMargin: totalRecharges > 0 ? ((netProfit / totalRecharges) * 100).toFixed(2) + '%' : '0%'
      }

      // 5) Statistiques mensuelles (simplifi√©es pour √©viter l'erreur createdAt)
      stats.monthly = {
        note: 'Statistiques mensuelles disponibles prochainement'
      }

      res.json({
        message: 'B√©n√©fices calcul√©s avec succ√®s.',
        data: stats,
        explanation: {
          formula: 'B√©n√©fice = (Recharges revendeur‚Üíuser) - (Retraits trait√©s)',
          details: {
            recharges: 'Somme des transactions valid√©es de revendeurs vers utilisateurs',
            withdrawals: 'Somme des retraits ayant le statut "trait√©"',
            netProfit: 'Recharges totales - Retraits trait√©s'
          }
        }
      })

    } catch (error) {
      console.error('‚ùå Erreur lors du calcul des b√©n√©fices:', error)
      res.status(500).json({
        message: "Erreur lors du calcul des b√©n√©fices.",
        error: error.message
      })
    }
  })
}